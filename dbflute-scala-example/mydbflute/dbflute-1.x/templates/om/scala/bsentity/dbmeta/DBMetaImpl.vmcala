##
## Copyright 2004-2014 the Seasar Foundation and the Others.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
## either express or implied. See the License for the specific language
## governing permissions and limitations under the License.
##
${database.allClassCopyright}package ${myDBMetaPackageName};
#set ($myClassName = "${myDBMetaClassName}")

import java.util.List;
import java.util.Map;
import java.util.HashMap

import org.seasar.dbflute.DBDef;
import org.seasar.dbflute.Entity;
import org.seasar.dbflute.dbmeta.AbstractDBMeta;
import org.seasar.dbflute.dbmeta.DBMeta.OptimisticLockType
import org.seasar.dbflute.dbmeta.PropertyGateway;
import org.seasar.dbflute.dbmeta.info._
import org.seasar.dbflute.dbmeta.name._
import ${glPackageBaseCommon}._
import ${myExtendedEntityPackageName}._

/**
 * The DB meta of ${table.tableDbName}. (Singleton)
 * @author ${database.classAuthor}
 */
object ${myClassName} extends AbstractDBMeta {

    // ===================================================================================
    //                                                                       Current DBDef
    //                                                                       =============
    def getCurrentDBDef(): DBDef = { return ${glDBCurrent}.currentDBDef(); }

    // ===================================================================================
    //                                                                    Property Gateway
    //                                                                    ================
## /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## These fields and methods should be defined before definitions of column info.
## And the map should be plain map for performance.
## - - - - - - - - - -/
    protected val _epgMap: Map[String, PropertyGateway] = newHashMap();
    {
#foreach ($col in $table.columns)
        setupEpg(_epgMap, new Epg${col.javaName}(), "${col.javaBeansRulePropertyName}");
#end
    }
    def findPropertyGateway(propertyName: String): PropertyGateway = { return doFindEpg(_epgMap, propertyName); }
#foreach ($col in $table.columns)
#set ($setupperClassName = "Epg${col.javaName}")
#if ($col.isCheckSelectedClassification() || $col.isForceClassificationSetting())
    class ${setupperClassName} extends PropertyGateway {
        def read(et: Entity): Object = { return et.asInstanceOf[${myExtendedObjectClassName}].get${col.javaName}(); }
        def write(et: Entity, vl: Object): Unit = {
            val col: ColumnInfo = column${col.javaBeansRulePropertyNameInitCap}();
#if ($col.isCheckSelectedClassification())
            AbstractDBMeta.ccls(col, vl);
#end
            et.asInstanceOf[${myExtendedObjectClassName}].set${col.javaName}As${col.classificationName}(AbstractDBMeta.gcls(col, vl).asInstanceOf[${glCDef}.${col.classificationName}]);
        }
#else
## /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
## for different type between relation (Integer, Long and BigDecimal are prior)
## - - - - - - - - - -/
    class ${setupperClassName} extends PropertyGateway {
        def read(et: Entity): Object = { return et.asInstanceOf[${myExtendedObjectClassName}].get${col.javaName}(); }
#if ($col.isJavaNativeNumberObject())
#if ($col.isJavaNativeInteger())
        def write(et: Entity, vl: Object): Unit = { et.asInstanceOf[${myExtendedObjectClassName}].set${col.javaName}(AbstractDBMeta.cti(vl)); }
#elseif ($col.isJavaNativeLong())
        def write(et: Entity, vl: Object): Unit = { et.asInstanceOf[${myExtendedObjectClassName}].set${col.javaName}(AbstractDBMeta.ctl(vl)); }
#elseif ($col.isJavaNativeBigDecimal())
        def write(et: Entity, vl: Object): Unit = { et.asInstanceOf[${myExtendedObjectClassName}].set${col.javaName}(AbstractDBMeta.ctb(vl)); }
#else
        def write(et: Entity, vl: Object): Unit = { et.asInstanceOf[${myExtendedObjectClassName}].set${col.javaName}(AbstractDBMeta.ctn(vl, classOf[${col.javaNative}])); }
#end
#else
#if ($col.isJavaNativeUtilList())
        @SuppressWarnings("unchecked")
        def write(et: Entity, vl: Object): Unit = { et.asInstanceOf[${myExtendedObjectClassName}].set${col.javaName}(vl.asInstanceOf[${col.javaNative}]); }
#else
        def write(et: Entity, vl: Object): Unit = { et.asInstanceOf[${myExtendedObjectClassName}].set${col.javaName}(vl.asInstanceOf[${col.javaNative}]); }
#end
#end
#end
    }
#end

    // ===================================================================================
    //                                                                          Table Info
    //                                                                          ==========
    protected val _tableDbName: String = "${table.tableDbName}";
    protected val _tablePropertyName: String = "${table.javaBeansRulePropertyName}";
    protected val _tableSqlName: TableSqlName = new TableSqlName("${table.tableSqlName}", _tableDbName);
    { _tableSqlName.xacceptFilter(${glDBFluteConfig}.getTableSqlNameFilter()); }
    def getTableDbName(): String = { return _tableDbName; }
    def getTablePropertyName(): String = { return _tablePropertyName; }
    def getTableSqlName(): TableSqlName = { return _tableSqlName; }
#if ($table.hasAlias())
    protected val _tableAlias: String = "$table.alias";
    def getTableAlias(): String = { return _tableAlias; }
#end
#if ($table.isCommentForDBMetaValid())
    protected val _tableComment: String = "$table.commentForDBMeta";
    def getTableComment(): String = { return _tableComment; }
#end

    // ===================================================================================
    //                                                                         Column Info
    //                                                                         ===========
#foreach ($col in $table.columns)
    protected val _column${col.javaBeansRulePropertyNameInitCap}: ColumnInfo = cci("${col.name}", "${col.columnSqlName}", ${col.synonymSettingExpression}, ${col.aliasSettingExpression}, ${col.isNotNull()}, "${col.javaBeansRulePropertyName}", ${col.javaNativeTypeLiteral}, ${col.isPrimaryKey()}, ${col.isAutoIncrement()}, "${col.dbTypeExpression}", ${col.columnSizeSettingExpression}, ${col.columnDecimalDigitsSettingExpression}, ${col.defaultValueSettingExpression}, ${col.isCommonColumn()}, ${col.optimistickLockExpression}, ${col.commentForDBMetaSettingExpression}, ${col.foreignPropertyNameCommaStringLiteralExpression}, ${col.referrerPropertyNameCommaStringLiteralExpression}, ${col.classificationMetaSettingExpression});
#end

#foreach ($col in $table.columns)
    def column${col.javaBeansRulePropertyNameInitCap}(): ColumnInfo = { return _column${col.javaBeansRulePropertyNameInitCap}; }
#end

    protected def ccil(): List[ColumnInfo] = {
        val ls: List[ColumnInfo] = newArrayList();
#foreach ($col in $table.columns)
        ls.add(column${col.javaBeansRulePropertyNameInitCap}());
#end
        return ls;
    }

    { initializeInformationResource(); }

    // ===================================================================================
    //                                                                         Unique Info
    //                                                                         ===========
    // -----------------------------------------------------
    //                                       Primary Element
    //                                       ---------------
#if ($table.hasPrimaryKey())
#if ($table.hasSinglePrimaryKey())
    protected def cpui(): UniqueInfo = { return hpcpui(column${table.primaryKeyAsOne.javaBeansRulePropertyNameInitCap}()); }
#else
    protected def cpui(): UniqueInfo = {
        List<ColumnInfo> ls = newArrayListSized(4);val ls: List[ColumnInfo] = newArrayListSized(4);
#foreach ($col in $table.primaryKey)
        ls.add(column${col.javaBeansRulePropertyNameInitCap}());
#end
        return hpcpui(ls);
    }
#end
#else
    protected def cpui(): UniqueInfo = {
        throw new UnsupportedOperationException("The table does not have primary key: " + getTableDbName());
    }
#end
    def hasPrimaryKey(): Boolean = { return ${table.hasPrimaryKey()}; }
    def hasCompoundPrimaryKey(): Boolean = { return ${table.hasCompoundPrimaryKey()}; }

    // ===================================================================================
    //                                                                       Relation Info
    //                                                                       =============
    // -----------------------------------------------------
    //                                      Foreign Property
    //                                      ----------------
#foreach ($fk in $table.foreignKeys)
    def foreign${fk.foreignJavaBeansRulePropertyNameInitCap}(): ForeignInfo = {
#if ($fk.isSimpleKeyFK())
#set ($col = $fk.localColumnAsOne)
#set ($yourCol = ${fk.getForeignColumnByLocalColumn(${col})})
        Map<ColumnInfo, ColumnInfo> mp = newLinkedHashMap(column${col.javaBeansRulePropertyNameInitCap}(), ${fk.foreignTableDBMetaClassName}.column${yourCol.javaBeansRulePropertyNameInitCap}());
#else
        Map<ColumnInfo, ColumnInfo> mp = newLinkedHashMapSized(4);
#foreach ($col in $fk.localColumnList)
#set ($yourCol = ${fk.getForeignColumnByLocalColumn(${col})})
        mp.put(column${col.javaBeansRulePropertyNameInitCap}(), ${fk.foreignTableDBMetaClassName}.column${yourCol.javaBeansRulePropertyNameInitCap}());
#end
#end
        return cfi("${fk.name}", "${fk.foreignJavaBeansRulePropertyName}", this, ${fk.foreignTableDBMetaClassName}, mp, ${table.resolveForeignIndex($fk)}, ${fk.isOneToOne()}, ${fk.isBizOneToOne()}, false, ${fk.isAdditionalForeignKey()}, ${fk.fixedConditionArg}, ${fk.dynamicFixedConditionDBMetaSetupList}, ${fk.isFixedInline()}, ${fk.foreignReverseRelationPropertyNameArg});
    }
#end
#foreach ($referrer in $table.referrerAsOneList)
#set ($genericsColumnInfoMap = "ColumnInfo, ColumnInfo")
    def foreign${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}(): ForeignInfo = {
#if ($referrer.isSimpleKeyFK())
#set ($col = $referrer.foreignColumnAsOne)
#set ($yourCol = ${referrer.getLocalColumnByForeignColumn(${col})})
        Map<ColumnInfo, ColumnInfo> mp = newLinkedHashMap(column${col.javaBeansRulePropertyNameInitCap}(), ${referrer.referrerTableDBMetaClassName}.column${yourCol.javaBeansRulePropertyNameInitCap}());
#else
        Map<ColumnInfo, ColumnInfo> mp = newLinkedHashMapSized(4);
#foreach ($col in $referrer.foreignColumnList)
#set ($yourCol = ${referrer.getLocalColumnByForeignColumn(${col})})
        mp.put(column${col.javaBeansRulePropertyNameInitCap}(), ${referrer.referrerTableDBMetaClassName}.column${yourCol.javaBeansRulePropertyNameInitCap}());
#end
#end
        return cfi("${referrer.name}", "${referrer.referrerJavaBeansRulePropertyNameAsOne}", this, ${referrer.referrerTableDBMetaClassName}, mp, ${table.resolveReferrerIndexAsOne($referrer)}, ${referrer.isOneToOne()}, ${referrer.isBizOneToOne()}, true, ${referrer.isAdditionalForeignKey()}, ${referrer.fixedConditionArg}, ${referrer.dynamicFixedConditionDBMetaSetupList}, ${referrer.isFixedInline()}, ${referrer.referrerReverseRelationPropertyNameArg});
    }
#end

    // -----------------------------------------------------
    //                                     Referrer Property
    //                                     -----------------
#foreach ($referrer in $table.referrerAsManyList)
    def referrer${referrer.referrerJavaBeansRulePropertyNameInitCap}(): ReferrerInfo = {
#if ($referrer.isSimpleKeyFK())
#set ($col = $referrer.foreignColumnAsOne)
        Map<ColumnInfo, ColumnInfo> mp = newLinkedHashMap(column${col.javaBeansRulePropertyNameInitCap}(), ${referrer.referrerTableDBMetaClassName}.column${referrer.getLocalColumnByForeignColumn(${col}).javaBeansRulePropertyNameInitCap}());
#else
        Map<ColumnInfo, ColumnInfo> mp = newLinkedHashMapSized(4);
#foreach ($col in $referrer.foreignColumnList)
        mp.put(column${col.javaBeansRulePropertyNameInitCap}(), ${referrer.referrerTableDBMetaClassName}.column${referrer.getLocalColumnByForeignColumn(${col}).javaBeansRulePropertyNameInitCap}());
#end
#end
        return cri("${referrer.name}", "${referrer.referrerJavaBeansRulePropertyName}", this, ${referrer.referrerTableDBMetaClassName}, mp, ${referrer.isOneToOne()}, ${referrer.referrerReverseRelationPropertyNameArg});
    }
#end

    // ===================================================================================
    //                                                                        Various Info
    //                                                                        ============
#if ($table.isUseIdentity())
    def hasIdentity(): Boolean = { return true; }
#end
#if ($table.isUseSequence())
    def hasSequence(): Boolean = { return true; }
    def getSequenceName(): String = { return "${table.sequenceSqlName}"; }
    def getSequenceIncrementSize(): Integer = { return ${table.sequenceIncrementSizeExpression}; }
    def getSequenceCacheSize(): Integer = { return ${table.sequenceCacheSizeExpression}; }
#end
#if ($table.isUseVersionNo())
    def hasVersionNo(): Boolean = { return true; }
    def getVersionNoColumnInfo(): ColumnInfo = { return _column${table.versionNoJavaName}; }
#end
#if ($table.isUseUpdateDate())
    def hasUpdateDate(): Boolean = { return true; }
    def getUpdateDateColumnInfo(): ColumnInfo = { return _column${table.updateDateJavaName}; }
#end
#if ($table.hasAllCommonColumn())
    def hasCommonColumn(): Boolean = { return true; }
    def getCommonColumnInfoList(): List[ColumnInfo] =
    { return newArrayList(${table.commonColumnListSetupExpression}); }
    def getCommonColumnInfoBeforeInsertList(): List[ColumnInfo] =
    { return newArrayList(${table.commonColumnBeforeInsertListSetupExpression}); }
    def getCommonColumnInfoBeforeUpdateList(): List[ColumnInfo] =
    { return newArrayList(${table.commonColumnBeforeUpdateListSetupExpression}); }
#end

    // ===================================================================================
    //                                                                           Type Name
    //                                                                           =========
    def getEntityTypeName(): String = { return "${myExtendedEntityPackageName}.${myExtendedObjectClassName}"; }
#if ($isExistConditionBean)
    def getConditionBeanTypeName(): String = { return "${glPackageCB}.${myConditionBeanClassName}"; }
#else
    def getConditionBeanTypeName(): String = { return null; }
#end
#if ($isExistBehavior)
    def getBehaviorTypeName(): String = { return "${myExtendedBhvPackageName}.${myExtendedBhvClassName}"; }
#else
    def getBehaviorTypeName(): String = { return null; }
#end

    // ===================================================================================
    //                                                                         Object Type
    //                                                                         ===========
    def getEntityType(): Class[${myExtendedObjectClassName}] = { return classOf[${myExtendedObjectClassName}]; }

    // ===================================================================================
    //                                                                     Object Instance
    //                                                                     ===============
    def newEntity(): Entity = { return newMyEntity(); }
    def newMyEntity(): ${myExtendedObjectClassName} = { return new ${myExtendedObjectClassName}(); }

    // ===================================================================================
    //                                                                   Map Communication
    //                                                                   =================
    def acceptPrimaryKeyMap(et: Entity, mp: Map[String, _ <: Object]): Unit =
    { doAcceptPrimaryKeyMap(et.asInstanceOf[${myExtendedObjectClassName}], mp); }
    def acceptAllColumnMap(et: Entity, mp: Map[String, _ <: Object]): Unit =
    { doAcceptAllColumnMap(et.asInstanceOf[${myExtendedObjectClassName}], mp); }
    def extractPrimaryKeyMap(et: Entity): Map[String, Object] = { return doExtractPrimaryKeyMap(et); }
    def extractAllColumnMap(et: Entity): Map[String, Object] = { return doExtractAllColumnMap(et); }
}
